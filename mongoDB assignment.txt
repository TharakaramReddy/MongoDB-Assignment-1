*Inserting data into movie collection
--------------------------------------------------------------
db.movies.insert({

"title" : "Fight Club",
"writer" : "Chuck Palahniuko",
"year" : 1999,
"actors" : [
 "Brad Pitt",
 "Edward Norton"
]
})
-----------------------------------------------------------

db.movies.insert({

"title" : "Pulp Fiction",
"writer" : "Pulp Fiction",
"year" : 1994,
"actors" : [
 "John Travolta",
 "Uma Thurman"
]
})
-----------------------------------------------------------

db.movies.insert({

"title" :"Inglorious Basterds",
"writer" :"Quentin Tarantino",
"year" : 2009,
"actors" : [
 "Brad Pitt",
 "Diane Kruger",
"Eli Roth"

]
})

-------------------------------------------------------------
db.movies.insert({

"title" : "The Hobbit:An Unexpected Journey",
"writer" : "J.R.R. Tolkein",
"year" : 2012,
"franchise" :"The Hobbit"
})
-------------------------------------------------------------
db.movies.insert({

"title" : "The Hobbit:The Desolation of Smaug",
"writer" : "J.R.R. Tolkein",
"year" : 2013,
"franchise" :"The Hobbit"
})
--------------------------------------------------------------
db.movies.insert({

"title" :"The Hobbit:The Battle of the Five Armies",
"writer" : "J.R.R. Tolkein",
"year" : 2012,
"franchise" :"The Hobbit",
"synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness"
})

--------------------------------------------------------------

db.movies.insert({

"title" : "Pee Wee Herman's Big Adventure"

})

--------------------------------------------------------------

db.movies.insert({

"title" : "Avatar"

})

--------------------------------------------------------------

*1.get all documents

db.movies.find().pretty()
--------------------------------------------------------------
*2. get all documents with writer set to "Quentin Tarantino"

db.movies.find({writer: "Quentin Tarantino"}).pretty()
--------------------------------------------------------------
*3. get all documents where actors include "Brad Pitt"

db.movies.find({actors: "Brad Pitt"}).pretty()
--------------------------------------------------------------
*4. get all documents with franchise set to "The Hobbit"

db.movies.find({franchise: "The Hobbit"}).pretty()

--------------------------------------------------------------
*5. get all movies released in the 90s

db.movies.find({year:{$gt:1990, $lt:2000}}).pretty()

--------------------------------------------------------------
*6. get all movies released before the year 2000 or after 2010

db.movies.find({$or:[{"year":{$lt:2000}}, {"year":{$gt:2010}}]}).pretty()

----------------------------------------------------------------
*updating synopsis

db.movies.update({title: "The Hobbit:An Unexpected Journey"}, {$set: {synopsis: "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})

db.movies.update({title: "The Hobbit:The Desolation of Smaug"}, {$set: {synopsis: "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})

---------------------------------------------------------------
*adding actors to existing movie title

db.movies.update({title: "Pulp Fiction"},{$addToSet: {actors:"Samuel L.Jackson"}})

--------------------------------------------------------------
*Text Search*

*1. find all movies that have a synopsis that contains the word "Bilbo"

db.movies.find({"synopsis":/Bilbo/},{title:true,_id:0})

---------------------------------------------------------------
*2. find all movies that have a synopsis that contains the word "Gandalf"

db.movies.find({"synopsis":/Gandalf/},{title:true,_id:0})

---------------------------------------------------------------
*3. find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"

db.movies.find({$and: [{synopsis: /Bilbo/}, {synopsis: {$not: /Gandalf/}}]}).pretty()

---------------------------------------------------------------
*4. find all movies that have a synopsis that contains the word "dwarves" or "hobbit"

db.movies.find({$or: [{synopsis: /dwarves/}, {synopsis: /hobbit/}]}).pretty()
---------------------------------------------------------------

*5. find all movies that have a synopsis that contains the word "gold" and "dragon"

db.movies.find({$and: [{synopsis: /gold/}, {synopsis: /dragon/}]}).pretty()

-----------------------------------------------------------------
*Delete Documents

1. delete the movie "Pee Wee Herman's Big Adventure"

db.movies.remove({title: "Pee Wee Herman's Big Adventure"})



2. delete the movie "Avatar"
db.movies.remove({title: "Avatar"})

-----------------------------------------------------------------------




*user collection
-----------=---

db.users.insert({
"username" : "GoodGuyGreg",
 "first_name" : "Good Guy",
 "last_name" : "Greg",
 "username" : "ScumbagSteve",
 "full_name" : [{first : "Scumbag", last : "Steve"}]})


--------------------------------------------------------------------


*posts collections


db.posts.insert({
"username" : "GoodGuyGreg", 
"title" : "Passes out at party", 
"body" : "Wakes up early and cleans house"})



db.posts.insert({
"username" : "GoodGuyGreg", 
"title" : "Steals your identity", 
"body" : "Raises your credit score"})


db.posts.insert({
"username" : "GoodGuyGreg", 
"title" : "Reports a bug in your code", 
"body" : "Sends you a Pull Request"})



db.posts.insert({
"username" : "ScumbagSteve", 
"title" : "Borrows something", 
"body" : "Sells it"})


db.posts.insert({
"username" : "ScumbagSteve", 
"title" : "Borrows everything", 
"body" : "The end"})



db.posts.insert({
"username" : "ScumbagSteve",
"title" : "Forks your repo on github",
 "body" : "Sets to private"})



-------------------------------------------------------------
*comments collections


db.comments.insert({
"username" : "GoodGuyGreg",
"comment" : "Hope you got a good deal!",
post :ObjectId("5d5a96847ffd9f0f2446c052")})


db.comments.insert({
username : "GoodGuyGreg", 
comment : "What's mine is yours!", 
post :ObjectId("5d5a96847ffd9f0f2446c053")})


db.comments.insert({
username : "GoodGuyGreg", 
comment : "Don't violate the licensing agreement!",
 post :ObjectId("5d5a968e7ffd9f0f2446c054")})



db.comments.insert({
username : "ScumbagSteve",
comment : "It still isn't clean", 
post : ObjectId("5d5a96617ffd9f0f2446c04f")})



db.comments.insert({
username : "ScumbagSteve", 
comment : "Denied your PR cause I found a hack",
 post : ObjectId("5d5a96747ffd9f0f2446c051")})

----------------------------------------------------------------


**Querying related collections**
---------------------------------
---------------------------------

*1. find all users

db.users.find({}).pretty()
--------------------------------------------------------------
*2. find all posts

 db.posts.find({}).pretty()

----------------------------------------------------------------
*3. find all posts that was authored by "GoodGuyGreg"

 db.posts.find({username: "GoodGuyGreg"}).pretty()

------------------------------------------------------------------
*4. find all posts that was authored by "ScumbagSteve"
 db.posts.find({username: "ScumbagSteve"}).pretty()

-----------------------------------------------------------------
*5. find all comments
 db.comments.find({}).pretty()

-----------------------------------------------------------------

*6. find all comments that was authored by "GoodGuyGreg"
 db.comments.find({username: "GoodGuyGreg"}).pretty()

-------------------------------------------------------------------

*7. find all comments that was authored by "ScumbagSteve"
 db.comments.find({username: "ScumbagSteve"}).pretty()

--------------------------------------------------------------------
*8. find all comments belonging to the post "Reports a bug in your code"

 db.comments.find({post: db.posts.findOne({title: "Reports a bug in your code"})._id}).pretty()
 
 